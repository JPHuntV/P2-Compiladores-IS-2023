inicio {
  programa {
    declaraFuncion: test {
      parametros {
        int: a
        int: b
      }
      bloque {
        returnStm {
          value {
            expresionBinaria {
              tipo: expresionAritmetica
              operador: +
              left: IDENTIFIER {
                valor: a
              }
              right: IDENTIFIER {
                valor: b
              }
            }
          }
        }
      }
      dataType: int
    }
    declaraFuncion: miFunc {
      parametros {
        int: dif
        char: otra
      }
      bloque {
        declaraVar: otrasS {
          dataType: int
          init {
            literal_int {
              1
            }
          }
        }
        declaraVar: otrasSsd {
          dataType: int
          init {
            expresionBinaria {
              tipo: expresionAritmetica
              operador: +
              left: literal_int {
                2
              }
              right: expresionBinaria {
                tipo: expresionAritmetica
                operador: +
                left: literal_int {
                  3
                }
                right: literal_int {
                  4
                }
              }
            }
          }
        }
        declaraVar: prueba {
          dataType: int
          init {
            llamaFuncion {
              nombre: test
              argumentos {
                literal_int: 1
                IDENTIFIER: otrasS
              }
            }
          }
        }
        declaraVar: otras {
          dataType: int
          init {
            operadorUnario {
              tipo: IDENTIFIER
              operador: -
              value: dif
            }
          }
        }
        declaraVar: otrase {
          dataType: int
          init {
            operadorUnario {
              tipo: expresionNumerica
              operador: -
              value: literal_int {
                2
              }
            }
          }
        }
        declaraVar: str {
          dataType: String
          init {
            literal_string {
              "Hola $%&/#$&) mundo"
            }
          }
        }
        declaraVar: var {
          dataType: int
        }
        estructuraControl {
          tipo: forStm
          init: declaraVar: i {
            dataType: int
            init {
              literal_int {
                0
              }
            }
          }
          eval: expresionBinaria {
            tipo: expresionRelacional
            operador: >
            left: IDENTIFIER {
              valor: i
            }
            right: IDENTIFIER {
              valor: var
            }
          }
          update: init {
            operadorUnario {
              tipo: IDENTIFIER
              operador: ++
              value: i
            }
          }
          body: bloque {
            estructuraControl {
              tipo: doWhileStm
              body: bloque {
                asignacion: var {
                  init {
                    expresionBinaria {
                      tipo: expresionAritmetica
                      operador: -
                      left: IDENTIFIER {
                        valor: var
                      }
                      right: literal_int {
                        1
                      }
                    }
                  }
                }
              }
              eval: expresionBinaria {
                tipo: expresionLogica
                operador: #
                left: expresionBinaria {
                  tipo: expresionRelacional
                  operador: >
                  left: IDENTIFIER {
                    valor: var
                  }
                  right: literal_int {
                    12
                  }
                }
                right: expresionBinaria {
                  tipo: expresionRelacional
                  operador: >
                  left: expresionBinaria {
                    tipo: expresionAritmetica
                    operador: +
                    left: literal_int {
                      34
                    }
                    right: literal_int {
                      34
                    }
                  }
                  right: literal_int {
                    12
                  }
                }
              }
            }
            estructuraControl {
              tipo: ifStm
              eval: expresionBinaria {
                tipo: expresionRelacional
                operador: ==
                left: IDENTIFIER {
                  valor: var
                }
                right: literal_int {
                  0
                }
              }
              body: bloque {
                expresion {
                  llamaFuncion {
                    nombre: print
                    argumentos {
                      literal_string: "entra al if"
                    }
                  }
                }
              }
              alternate: estructuraControl {
                tipo: elifStm
                eval: literal_bool {
                  true
                }
                body: bloque {
                  expresion {
                    llamaFuncion {
                      nombre: print
                      argumentos {
                        IDENTIFIER: valor
                      }
                    }
                  }
                }
                alternate: estructuraControl {
                  tipo: elifStm
                  eval: expresionBinaria {
                    tipo: expresionLogica
                    operador: ^
                    left: literal_bool {
                      false
                    }
                    right: literal_bool {
                      true
                    }
                  }
                  body: bloque {
                    expresion {
                      llamaFuncion {
                        nombre: leer
                        argumentos {
                          IDENTIFIER: var
                        }
                      }
                    }
                    breakStm
                  }
                }
              }
            }
          }
        }
        returnStm {
          value {
            literal_float {
              1.1
            }
          }
        }
      }
      dataType: float
    }
    declaraFuncion: miOtraFun {
      bloque {
        returnStm {
          value {
            literal_bool {
              true
            }
          }
        }
      }
      dataType: bool
    }
    declaraFuncion: main {
      bloque {
        expresion {
          llamaFuncion {
            nombre: print
            argumentos {
              literal_string: "hola"
            }
          }
        }
        expresion {
          llamaFuncion {
            nombre: print
            argumentos {
              literal_int: 34
            }
          }
        }
        expresion {
          llamaFuncion {
            nombre: print
            argumentos {
              literal_float: 6.7
            }
          }
        }
        returnStm {
          value {
            literal_int {
              1
            }
          }
        }
      }
      dataType: int
    }
  }
}