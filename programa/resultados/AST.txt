inicio {
  programa {
    declaraFuncion: test {
      parametros {
        int: a
        int: b
      }
      bloque {
        estructuraControl {
          tipo: whileStm
          eval: expresionBinaria {
            tipo: expresionRelacional
            operador: >
            left: IDENTIFIER {
              valor: a
            }
            right: IDENTIFIER {
              valor: b
            }
          }
          body: bloque {
            estructuraControl {
              tipo: forStm
              init: declaraVar: i {
                dataType: int
                init {
                  literal_int {
                    0
                  }
                }
              }
              eval: expresionBinaria {
                tipo: expresionRelacional
                operador: >
                left: IDENTIFIER {
                  valor: i
                }
                right: IDENTIFIER {
                  valor: a
                }
              }
              update: init {
                operadorUnario {
                  tipo: IDENTIFIER
                  operador: ++
                  value: i
                }
              }
              body: bloque {
                asignacion: a {
                  init {
                    expresionBinaria {
                      tipo: expresionAritmetica
                      operador: -
                      left: IDENTIFIER {
                        valor: a
                      }
                      right: literal_int {
                        1
                      }
                    }
                  }
                }
                estructuraControl {
                  tipo: ifStm
                  eval: expresionBinaria {
                    tipo: expresionRelacional
                    operador: ==
                    left: IDENTIFIER {
                      valor: a
                    }
                    right: literal_int {
                      0
                    }
                  }
                  body: bloque {
                    expresion {
                      llamaFuncion {
                        nombre: print
                        argumentos {
                          literal_string: "entra al if"
                        }
                      }
                    }
                  }
                  alternate: estructuraControl {
                    tipo: elifStm
                    eval: literal_bool {
                      true
                    }
                    body: bloque {
                      expresion {
                        llamaFuncion {
                          nombre: print
                          argumentos {
                            IDENTIFIER: a
                          }
                        }
                      }
                      breakStm
                    }
                    alternate: estructuraControl {
                      tipo: elifStm
                      eval: expresionBinaria {
                        tipo: expresionLogica
                        operador: ^
                        left: literal_bool {
                          false
                        }
                        right: literal_bool {
                          true
                        }
                      }
                      body: bloque {
                        expresion {
                          llamaFuncion {
                            nombre: lectura
                            argumentos {
                              IDENTIFIER: a
                            }
                          }
                        }
                        breakStm
                      }
                    }
                  }
                }
              }
            }
          }
        }
        returnStm {
          value {
            expresionBinaria {
              tipo: expresionAritmetica
              operador: +
              left: IDENTIFIER {
                valor: a
              }
              right: IDENTIFIER {
                valor: b
              }
            }
          }
        }
      }
      dataType: int
    }
    declaraFuncion: main {
      bloque {
        expresion {
          llamaFuncion {
            nombre: print
            argumentos {
              literal_string: "hola"
            }
          }
        }
        expresion {
          llamaFuncion {
            nombre: print
            argumentos {
              literal_int: 34
            }
          }
        }
        expresion {
          llamaFuncion {
            nombre: print
            argumentos {
              literal_float: 6.7
            }
          }
        }
        returnStm {
          value {
            literal_int {
              1
            }
          }
        }
      }
      dataType: int
    }
  }
}